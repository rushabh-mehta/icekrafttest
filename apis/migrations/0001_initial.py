# Generated by Django 2.2.2 on 2019-07-04 07:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'normal_user'), (2, 'restaurant_1_admin'), (3, 'restaurant_2_admin'), (4, 'restaurant_3_admin'), (5, 'restaurant_4_admin'), (6, 'restaurant_5_admin'), (7, 'restaurant_6_admin'), (8, 'restaurant_7_admin'), (9, 'restaurant_8_admin'), (10, 'restaurant_9_admin'), (11, 'restaurant_10_admin'), (12, 'restaurant_11_admin'), (13, 'super_admin')], default=1)),
                ('user_reward_points', models.FloatField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fooditem_name', models.CharField(max_length=500)),
                ('fooditem_cost', models.FloatField()),
                ('fooditem_description', models.CharField(max_length=1000)),
                ('fooditem_picture', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_created_on', models.DateField(auto_now_add=True)),
                ('order_updated_on', models.DateField(auto_now=True)),
                ('order_table_number', models.IntegerField()),
                ('order_active', models.BooleanField()),
                ('order_total_amount', models.FloatField()),
                ('order_confirm', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restaurant_name', models.CharField(max_length=300)),
                ('restaurant_address', models.CharField(max_length=1000)),
                ('restaurant_phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number is not valid!', regex='^\\+?1?\\d{9,15}$')])),
                ('restaurant_fooditem_relation', models.ManyToManyField(to='apis.FoodItem')),
            ],
        ),
        migrations.CreateModel(
            name='OrderFoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orderfooditem_quantity', models.IntegerField()),
                ('orderfooditem_fooditem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis.FoodItem')),
                ('orderfooditem_order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis.Order')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='order_fooditem_relation',
            field=models.ManyToManyField(through='apis.OrderFoodItem', to='apis.FoodItem'),
        ),
        migrations.AddField(
            model_name='order',
            name='order_restaurant_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis.Restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='order_user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
